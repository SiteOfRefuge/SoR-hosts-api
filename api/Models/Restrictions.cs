// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace SiteOfRefuge.API
{
    /// <summary> The Restrictions. </summary>
    public readonly partial struct Restrictions : IEquatable<Restrictions>
    {
        private readonly string _value;
        public string Value { get { return this._value; } }

        public Restrictions() { this._value = null; }

        /// <summary> Determines if two <see cref="Restrictions"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Restrictions(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string KidsValue = "Kids";
        private const string AdultMenValue = "Adult men";
        private const string AdultWomenValue = "Adult women";
        private const string DogsValue = "Dogs";
        private const string CatsValue = "Cats";
        private const string OtherPetsValue = "Other pets";

        /// <summary> Kids. </summary>
        public static Restrictions Kids { get; } = new Restrictions(KidsValue);
        /// <summary> Adult men. </summary>
        public static Restrictions AdultMen { get; } = new Restrictions(AdultMenValue);
        /// <summary> Adult women. </summary>
        public static Restrictions AdultWomen { get; } = new Restrictions(AdultWomenValue);
 
        public static Restrictions Dogs { get; } = new Restrictions(DogsValue);
        public static Restrictions Cats { get; } = new Restrictions(CatsValue);
        public static Restrictions OtherPets { get; } = new Restrictions(OtherPetsValue);
 

        /// <summary> Determines if two <see cref="Restrictions"/> values are the same. </summary>
        public static bool operator ==(Restrictions left, Restrictions right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Restrictions"/> values are not the same. </summary>
        public static bool operator !=(Restrictions left, Restrictions right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Restrictions"/>. </summary>
        public static implicit operator Restrictions(string value) => new Restrictions(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Restrictions other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Restrictions other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
