// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Logging;
using SiteOfRefuge.API.Models;

namespace SiteOfRefuge.API
{
    public class HostsApi
    {

        /// <summary> Initializes a new instance of HostsApi. </summary>
        public HostsApi() {}

        /// <summary> Get a summary list of hosts registered in the system. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        [Function(nameof(GetHosts))]
        public HttpResponseData GetHosts([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "hosts")] HttpRequestData req, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(GetHosts));
            logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200

            throw new NotImplementedException();
        }

        /// <summary> Registers a new host in the system. </summary>
        /// <param name="body"> The Host to use. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        [Function(nameof(AddHost))]
        public HttpResponseData AddHost([HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "hosts")] Host body, HttpRequestData req, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(AddHost));
            logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 201

            throw new NotImplementedException();
        }

        /// <summary> Get information about a specific host. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="id"> Host id in UUID/GUID format. </param>
        [Function(nameof(GetHost))]
        public HttpResponseData GetHost([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "hosts/{id}")] HttpRequestData req, Guid id, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(GetHost));
            logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }

        /// <summary> Updates a new host in the system. </summary>
        /// <param name="id"> Host id in UUID/GUID format. </param>
        /// <param name="body"> The Host to use. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="body"/> is null. </exception>
        [Function(nameof(UpdateHost))]
        public HttpResponseData UpdateHost(Guid id, [HttpTrigger(AuthorizationLevel.Anonymous, "put", Route = "hosts/{id}")] Host body, HttpRequestData req, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(UpdateHost));
            logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 204
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }

        /// <summary> Schedules a host to be deleted from the system (after 7 days archival). </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="id"> Host id in UUID/GUID format. </param>
        [Function(nameof(DeleteHost))]
        public HttpResponseData DeleteHost([HttpTrigger(AuthorizationLevel.Anonymous, "delete", Route = "hosts/{id}")] HttpRequestData req, Guid id, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(DeleteHost));            
            logger.LogInformation( $"HTTP trigger function processed a request for {id.ToString()}");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 202
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }
    }
}
