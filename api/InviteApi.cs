// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Microsoft.Azure.Functions.Worker;
using Microsoft.Azure.Functions.Worker.Http;
using Microsoft.Extensions.Logging;

namespace SiteOfRefuge.API
{
    public class InviteApi
    {
        /// <summary> Initializes a new instance of InviteApi. </summary>
        public InviteApi() {}

        /// <summary> Lists any current invitation requests for this user. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        [Function(nameof(GetInvites))]
        public HttpResponseData GetInvites([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "invite")] HttpRequestData req, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(GetInvites));
            logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200
            // Spec Defines: HTTP 403
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }

        /// <summary> Invite a refugee to connect. </summary>
        /// <param name="body"> The Id to use. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        [Function(nameof(InviteRefugee))]
        public HttpResponseData InviteRefugee([HttpTrigger(AuthorizationLevel.Anonymous, "post", Route = "invite")] string body, HttpRequestData req, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(InviteRefugee));
            logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 204
            // Spec Defines: HTTP 403
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }

        /// <summary> Show an invitation. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="id"> Invite id in UUID/GUID format. </param>
        [Function(nameof(GetInvite))]
        public HttpResponseData GetInvite([HttpTrigger(AuthorizationLevel.Anonymous, "get", Route = "invite/{id}")] HttpRequestData req, string id, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(GetInvite));
            logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200
            // Spec Defines: HTTP 403
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }

        /// <summary> Accept an invitation to connect. </summary>
        /// <param name="id"> Invite id in UUID/GUID format. </param>
        /// <param name="body"> The Id to use. </param>
        /// <param name="req"> Raw HTTP Request. </param>
        [Function(nameof(AcceptInvitation))]
        public HttpResponseData AcceptInvitation(string id, [HttpTrigger(AuthorizationLevel.Anonymous, "put", Route = "invite/{id}")] string body, HttpRequestData req, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(AcceptInvitation));
            logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 204
            // Spec Defines: HTTP 403
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }

        /// <summary> Withdraw invitation request. </summary>
        /// <param name="req"> Raw HTTP Request. </param>
        /// <param name="id"> Invite id in UUID/GUID format. </param>
        [Function(nameof(DeleteInvite))]
        public HttpResponseData DeleteInvite([HttpTrigger(AuthorizationLevel.Anonymous, "delete", Route = "invite/{id}")] HttpRequestData req, string id, FunctionContext context)
        {
            var logger = context.GetLogger(nameof(DeleteInvite));
            logger.LogInformation("HTTP trigger function processed a request.");

            // TODO: Handle Documented Responses.
            // Spec Defines: HTTP 200
            // Spec Defines: HTTP 404

            throw new NotImplementedException();
        }
    }
}
